# Get the absolute directory where this file is located.
# Perhaps there's a better way to do this?
WAFFLES_DIR=$(readlink -f "${BASH_SOURCE%/*}")

# WAFFLES_SITE_DIR is where roles and profiles are defined.
# Role commands/resources are placed in site/roles/role_name.sh.
# Role profiles are placed in site/profiles/profile/
# Role data is placed in site/data/role_name.sh
WAFFLES_SITE_DIR=${WAFFLES_SITE_DIR:-"$WAFFLES_DIR/site"}

# When WAFFLES_EXIT_ON_ERROR is true, the entire run will halt if an error
# is found. If it is false, the run will continue.
WAFFLES_EXIT_ON_ERROR=${WAFFLES_EXIT_ON_ERROR}

# When WAFFLES_COLOR_OUPUT is not null, logs will be printed with color headers.
WAFFLES_COLOR_OUTPUT=${WAFFLES_COLOR_OUTPUT}

# When WAFFLES_EXIT_ON_DUPLICATE_RESOURCE is true, the entire run will halt
# as soon as a duplicate resource is found. If it is false, the run will
# continue.
WAFFLES_EXIT_ON_DUPLICATE_RESOURCE=${WAFFLES_EXIT_ON_DUPLICATE_RESOURCE}

# WAFFLES_SSH_USER is the remote user to use when deploying remotely (push)
WAFFLES_SSH_USER=${WAFFLES_SSH_USER:-"root"}

# WAFFLES_REMOTE_SUDO determines if "sudo" should be run when deploying remotely (push)
WAFFLES_REMOTE_SUDO=${WAFFLES_REMOTE_SUDO}

# WAFFLES_REMOTE_DIR is the remote directory to deploy to (push)
WAFFLES_REMOTE_DIR=${WAFFLES_REMOTE_DIR:-"~/.waffles"}

# WAFFLES_REMOTE_SSH_KEY is the SSH key to use for remote deployments (push)
WAFFLES_REMOTE_SSH_KEY=${WAFFLES_REMOTE_SSH_KEY:-~/.ssh/id_rsa}

# WAFFLES_REMOTE_SSH_ATTEMPTS is the number of times to try connecting via SSH (push)
WAFFLES_REMOTE_SSH_ATTEMPTS=${WAFFLES_REMOTE_SSH_ATTEMPTS:-5}

# WAFFLES_REMOTE_SSH_WAIT is the amount of time in seconds to wait between retrying (push)
WAFFLES_REMOTE_SSH_WAIT=${WAFFLES_REMOTE_SSH_WAIT:-5}
